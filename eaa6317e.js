jscallback({"body":"package main\n\nimport \"strconv\"\n\ntype converter func()string\n\nfunc slice_via_str_from(slice []*, call func(*)string) (s converter) {\n\tvar n = -1\n\treturn func()string {\n\t\tif n \u003e= len(slice) {\n\t\t\treturn \"\"\n\t\t} else {\n\t\t\tn++\n\t\t\treturn call(slice[n])\n\t\t}\n\t}\n}\n\nfunc (f converter) to(slice []*, call func(string, **)) {\n\tfor i := range slice {\n\t\tcall(f(), \u0026slice[i])\n\t}\n}\n\n////////  TYPE-SPECIFIC BOILERPLATE //////////\n\nfunc my_float64_to_string(f *float64)string {\n\treturn strconv.FormatInt(int64(*f), 10)\n}\nfunc my_string_to_int(s string, out **int) {\n\ti, err := strconv.Atoi(s)\n\tif (err != nil) {\n\t\t*out = nil\n\t} else {\n\t\t*out = \u0026i\n\t}\n}\n\n///////////////////////////\n\nfunc main() {\n\tn1 := 32. ;\t n2 := 640.;\t n3 := 9600.\n\tvar as = []*float64{\u0026n1, \u0026n2, \u0026n3}\n\t\n\tvar bs = make ([]*int, 3)\n\t_ = bs\n\t\n\t// arbitrary slice conversion from original type via string to new type\n\tslice_via_str_from(as, my_float64_to_string).to(bs, my_string_to_int)\n\t\n\t\n\t// print the result\n\tfor _, v := range bs {\n\t\tprint(*v);\n\t\tprint(\"\\n\")\n\t}\n}"}
);